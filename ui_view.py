# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Алексей\Desktop\Новая папка\view.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import database
import funcs
import logging


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 570)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.fam_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.fam_edit.setGeometry(QtCore.QRect(540, 30, 250, 50))
        self.fam_edit.setObjectName("fam_edit")

        self.comment_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.comment_edit.setGeometry(QtCore.QRect(540, 270, 250, 50))
        self.comment_edit.setObjectName("comment_edit")

        self.tel_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.tel_edit.setGeometry(QtCore.QRect(540, 190, 250, 50))
        self.tel_edit.setObjectName("tel_edit")

        self.name_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.name_edit.setGeometry(QtCore.QRect(540, 110, 250, 50))
        self.name_edit.setObjectName("name_edit")

        self.fam_label = QtWidgets.QLabel(self.centralwidget)
        self.fam_label.setGeometry(QtCore.QRect(540, 10, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.fam_label.setFont(font)
        self.fam_label.setObjectName("fam_label")

        self.comment_label = QtWidgets.QLabel(self.centralwidget)
        self.comment_label.setGeometry(QtCore.QRect(540, 250, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comment_label.setFont(font)
        self.comment_label.setObjectName("comment_label")

        self.tel_label = QtWidgets.QLabel(self.centralwidget)
        self.tel_label.setGeometry(QtCore.QRect(540, 170, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tel_label.setFont(font)
        self.tel_label.setObjectName("tel_label")

        self.name_label = QtWidgets.QLabel(self.centralwidget)
        self.name_label.setGeometry(QtCore.QRect(540, 90, 50, 15))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.name_label.setFont(font)
        self.name_label.setObjectName("name_label")

        self.add_button = QtWidgets.QPushButton(self.centralwidget)
        self.add_button.setGeometry(QtCore.QRect(540, 330, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.add_button.setFont(font)
        self.add_button.setObjectName("add_button")
        self.add_button.clicked.connect(self.add_button_click)

        self.del_button = QtWidgets.QPushButton(self.centralwidget)
        self.del_button.setGeometry(QtCore.QRect(540, 390, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.del_button.setFont(font)
        self.del_button.setObjectName("del_button")
        self.del_button.clicked.connect(self.del_button_click)

        self.search_button = QtWidgets.QPushButton(self.centralwidget)
        self.search_button.setGeometry(QtCore.QRect(540, 450, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.search_button.setFont(font)
        self.search_button.setObjectName("search_button")
        self.search_button.clicked.connect(self.search_button_click)

        self.load_label = QtWidgets.QLabel(self.centralwidget)
        self.load_label.setGeometry(QtCore.QRect(20, 20, 511, 541))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.load_label.setFont(font)
        self.load_label.setText("")
        self.load_label.setObjectName("load_label")

        self.load_button = QtWidgets.QPushButton(self.centralwidget)
        self.load_button.setGeometry(QtCore.QRect(540, 510, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.load_button.setFont(font)
        self.load_button.setObjectName("load_button")
        self.load_button.clicked.connect(self.load_button_click)

        # self.fam_edit.setText('Зарипов')
        # self.name_edit.setText('Алексей')
        # self.tel_edit.setText('+79049844767')
        # self.comment_edit.setText('сотовый')

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Моя телефонная книга"))
        self.fam_label.setText(_translate("MainWindow", "Фамилия"))
        self.comment_label.setText(_translate("MainWindow", "Комментарий"))
        self.tel_label.setText(_translate("MainWindow", "Телефон"))
        self.name_label.setText(_translate("MainWindow", "Имя"))
        self.add_button.setText(_translate("MainWindow", "Добавить"))
        self.del_button.setText(_translate("MainWindow", "Удалить"))
        self.search_button.setText(_translate("MainWindow", "Поиск"))
        self.load_button.setText(_translate("MainWindow", "Загрузить"))

    # ------------------------------------------------------------------------------------------------
    def add_button_click(self):

        try:
            new_line_data = self.add_new_line_in_bd(self.input_data())
            database.write_to_csv(new_line_data)
            database.write_to_txt(new_line_data)
            self.load_button_click()
        except Exception as e:
            logging.debug(e)

    def input(self):
        lst = ['' for i in range(4)]
        lst[0] = self.fam_edit.text()
        lst[1] = self.name_edit.text()
        lst[2] = self.tel_edit.text()
        lst[3] = self.comment_edit.text()
        return lst


    def del_button_click(self):
        try:
            full_data = funcs.delete_much_contact(
                self.input(),
                self.get_data_from_bd(database.read_from_file()))
            database.delete_csv()
            database.delete_txt()
            for item in full_data:
                database.write_to_txt(item)
                database.write_to_csv(item)
            self.load_button_click()
        except Exception as e:
            logging.debug(e)

    def search_button_click(self) -> list[list[str]]:
        try:
            return self.search_by_input_info(
                str(self.fam_edit.text() or self.name_edit.text()
                    or self.tel_edit.text() or self.comment_edit.text()),
                self.get_data_from_bd(database.read_from_file()))

        except Exception as e:
            logging.debug(e)

    def load_button_click(self):
        self.load_label.setText(str(database.read_from_file()))

    # ------------------------------------------------------------------------------------------------

    def input_data(self) -> list[str]:
        lst = ['' for i in range(4)]
        lst[0] = str(self.fam_edit.text())
        lst[1] = str(self.name_edit.text())
        lst[2] = str(self.tel_edit.text())
        lst[3] = str(self.comment_edit.text())
        # self.load_label.setText(str(lst))
        return lst

    def add_new_line_in_bd(self, input_method):

        return input_method

    def get_data_from_bd(self, file_data: str) -> list[list[str]]:
        try:
            file_data = file_data.replace('-', '')
            file_data = file_data.replace(' ', '')
            file_data = file_data.replace('\n', ' ')
            lst = []
            if '  ' in file_data:
                file_data = file_data.split('  ')
                for word in file_data:
                    if word != '':
                        s = word.split(' ')
                        lst.append(s)
                self.load_label.setText(str(lst))
                return lst
            elif ';' in file_data:
                file_data = file_data.split(' ')
                for word in file_data:
                    if word != '':
                        s = word.split(';')
                        lst.append(s)
                return lst
        except Exception as e:
            logging.debug(e)

    def search_by_input_info(self, input_info: str, input_array: list[list[str]]) -> list[list[str]]:
        try:
            output = []
            for hi_level_item in input_array:
                for low_level_item in hi_level_item:
                    if input_info in low_level_item:
                        output.append(hi_level_item)
            self.load_label.setText(str(output))
            return output
        except Exception as e:
            logging.debug(e)
